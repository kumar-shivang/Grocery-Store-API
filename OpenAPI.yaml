openapi: 3.0.3
info:
  title: Grocery Store API
  description: This API allows you to interact with a grocery store database.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Local server
paths:
  /login/admin:
    post:
      tags:
        - admin
        - login
      summary: Login as an admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: Password123
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid username or password
        '403':
            description: Forbidden
            content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Only admins can login here
  /login/user:
    post:
      tags:
        - user
        - login
      summary: Login as a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user
                password:
                  type: string
                  example: Password123
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid username or password
        '403':
            description: Forbidden
            content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Only users can login here
  /login/manager:
    post:
      tags:
        - manager
        - login
      summary: Login as a manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: manager
                password:
                  type: string
                  example: Password123
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid username or password
        '403':
            description: Forbidden
            content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Only managers can login here
  /admin/approve_category/<int:category_request_id>:
    post:
      tags:
        - admin
      summary:
        Approve a category request
      parameters:
        - in: path
          name: category_request_id
          schema:
            type: integer
          required: true
          description: The ID of the category request to approve
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                        message:
                            type: string
                            example: Category "xyz" approved successfully
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Bad request
        '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: You are not authorized to approve category requests
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Category request not found
  /admin/reject_category/<int:category_request_id>:
    delete:
      tags:
        - admin
      summary:
        Reject a category request
      parameters:
        - in: path
          name: category_request_id
          schema:
            type: integer
          required: true
          description: The ID of the category request to reject
      requestBody:
            required: true
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/token'
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Category "xyz" rejected successfully
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Bad request
        '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: You are not authorized to reject category requests
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Category request not found
  /admin/create_admin:
    post:
      tags:
        - admin
      summary:
        Create a new admin (experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: Password123
                email:
                  type: string
                  example: admin@grocery.com

      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Admin created successfully
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Bad request
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Admin role not found
  /admin/get_category_requests:
    get:
      tags:
        - admin
      summary:
        Get all category requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    category_requests:
                        type: array
                        items:
                          $ref: '#/components/schemas/category_request'

        '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: You are not authorized to view category requests
  /admin/delete_category/<int:category_id>:

    delete:
      tags:
        - admin
        - category
      summary:
        Delete a category
      parameters:
        - in: path
          name: category_id
          schema:
            type: integer
          required: true
          description: The ID of the category to delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Category deleted successfully
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Bad request
        '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: You are not authorized to delete this category
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Category not found
  /admin/update_category/<int:category_id>:
    put:
      tags:
        - admin
        - category
      summary:
        Update the name and/or description of a category
      parameters:
        - in: path
          name: category_id
          schema:
            type: integer
          required: true
          description: The ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  example: xyz
                category_description:
                  type: string
                  example: xyz
                access_token:
                  type: string
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                        type: string
                        example: Category updated successfully
                    category:
                        $ref: '#/components/schemas/category'
        '400':
          description: Bad Request
          content:
              application/json:
                schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Bad request
        '403':
            description: Forbidden
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                          message:
                            type: string
                            example: You are not authorized to update this category
        '404':
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                          message:
                            type: string
                            example: Category not found




  /manager/create_manager:
    post:
      tags:
        - manager
      summary:
        Create a new manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: manager
                password:
                  type: string
                  example: Password123
                email:
                  type: string
                  example: manager@grocery.com
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Manager created successfully
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Bad request
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Manager role not found
  /manager:
    get:
      tags:
        - manager
      summary:
        Get the data of the manager who is logged in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    manager:
                        $ref: '#/components/schemas/manager'

        '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Forbidden

  /get_products:
    get:
      tags:
        - manager
        - product
      summary:
        Get all products managed by the manager who is logged in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                        type: string
                        example: Products fetched successfully
                    products:
                        type: array
                        items:
                          $ref: '#/components/schemas/product'
        '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: Forbidden
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      message:
                        type: string
                        example: No products found
  /manager/request_category:
        post:
            tags:
                - manager
                - category
            summary:
                Request a new category
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                category_name:
                                    type: string
                                    example: xyz
                                category_description:
                                    type: string
                                    example: xyz
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Category requested successfully
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Bad request
                '403':
                    description: Forbidden
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Only managers can request categories
  /manager/create_product:
    post:
      tags:
        - manager
        - product
      summary:
        Create a new product
      requestBody:
        required: true
        content:
            application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Apple
                    rate:
                        type: integer
                        example: 100
                    unit:
                        type: string
                        example: kg
                    description:
                        type: string
                        example: Apple
                    current_stock:
                        type: integer
                        example: 100
                    expiry_date:
                        type: string
                        example: 2021-05-01
                    category_id:
                        type: integer
                        example: 1
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                        type: string
                        example: Product created successfully
                    product:
                        $ref: '#/components/schemas/product'
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                        type: string
                        example: Bad request
  /manager/delete_product/<int:product_id>:
    delete:
      tags:
        - manager
        - product
      summary:
        Delete a product
      parameters:
        - in: path
          name: product_id
          schema:
            type: integer
          required: true
          description: The ID of the product to delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                        type: string
                        example: Product deleted successfully
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                        type: string
                        example: Bad request
        '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                        type: string
                        example: You are not authorized to delete this product
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                        type: string
                        example: Product not found
  /manager/add_stock/<int:product_id>:
    put:
      tags:
        - manager
        - product
      summary:
        Add stock to a product
      parameters:
        - in: path
          name: product_id
          schema:
            type: integer
          required: true
          description: The ID of the product to add stock to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 100
                access_token:
                  type: string
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
      responses:
        '200':
          description: OK
          content:
            application/json:
                  schema:
                    type: object
                    properties:
                        message:
                            type: string
                            example: Stock added successfully
                        product:
                            $ref: '#/components/schemas/product'

        '400':
            description: Bad Request
            content:
                application/json:
                  schema:
                    type: object
                    properties:
                        message:
                            type: string
                            example: Bad request
        '403':
            description: Forbidden
            content:
                application/json:
                  schema:
                    type: object
                    properties:
                        message:
                            type: string
                            example: You are not authorized to add stock to this product
        '404':
            description: Not Found
            content:
                application/json:
                  schema:
                    type: object
                    properties:
                        message:
                            type: string
                            example: Product not found
  /manager/update_price/<int:product_id>:
    put:
      tags:
        - manager
        - product
      summary:
        Update the price of a product
      parameters:
            - in: path
              name: product_id
              schema:
                type: integer
              required: true
              description: The ID of the product to update the price of
      requestBody:
            required: true
            content:
                application/json:
                  schema:
                    type: object
                    properties:
                        rate:
                            type: integer
                            example: 100
                        access_token:
                            type: string
                            example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
      responses:
          '200':
            description: OK
            content:
              application/json:
                    schema:
                      type: object
                      properties:
                          message:
                              type: string
                              example: Price updated successfully
                          product:
                              $ref: '#/components/schemas/product'
          '400':
                description: Bad Request
                content:
                    application/json:
                        schema:
                          type: object
                          properties:
                            message:
                                type: string
                                example: Bad request
          '403':
                description: Forbidden
                content:
                    application/json:
                        schema:
                          type: object
                          properties:
                            message:
                                type: string
                                example: You are not authorized to update the price of this product
          '404':
                description: Not Found
                content:
                    application/json:
                        schema:
                          type: object
                          properties:
                            message:
                                type: string
                                example: Product not found
  /manager/update_expiry_date/<int:product_id>:
    put:
      tags:
        - manager
        - product
      summary:
        Update the expiry date of a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expiry_date:
                  type: string
                  example: 2021-05-01
                access_token:
                  type: string
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9

      responses:
        '200':
            description: OK
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: Expiry date updated successfully
                            product:
                                $ref: '#/components/schemas/product'
        '400':
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: Bad request
        '403':
            description: Forbidden
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: You are not authorized to update the expiry date of this product
        '404':
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: Product not found



components:
  schemas:
    category_request:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category_name:
          type: string
          example: xyz
        added_on:
          type: string
          example: 2021-05-01 12:00:00
        approved:
          type: boolean
          example: false
        approved_at:
          type: string
          example: 2021-05-01 12:00:00
    user:
        type: object
        properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: user
            email:
              type: string
              example: user@grocery.com
            role:
              $ref: '#/components/schemas/role'
    role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        role_name:
          type: string
          example: user
        role_description:
          type: string
          example: User role
    product:
      type : object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Apple
        rate:
            type: integer
            example: 100
        unit:
            type: string
            example: kg
        description:
            type: string
            example: Apple
        current_stock:
            type: integer
            example: 100
        expiry_date:
            type: string
            example: 2021-05-01 12:00:00
        category:
            $ref: '#/components/schemas/category'
    category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category_name:
          type: string
          example: xyz
        category_description:
          type: string
          example: xyz
        products:
          type: array
          items:
            $ref: '#/components/schemas/product'
    order:
        type: object
        properties:
            id:
                type: integer
                example: 1
            order_date:
                type: string
                example: 2021-05-01 12:00:00
            quantity:
                type: integer
                example: 1
            value:
                type: number
                example: 100.0
            confirmed:
                type: boolean
                example: false
            product:
                $ref: '#/components/schemas/product'
    token:
      type: object
      properties:
        access_token:
          type: string
          example : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
    manager:
      allOf:
        - $ref: '#/components/schemas/user'
        - type: object
          properties:
            products:
              type: array
              items:
                $ref: '#/components/schemas/product'

    customer:
        allOf:
            - $ref: '#/components/schemas/user'
            - type: object
              properties:
                orders:
                  type: array
                  items:
                    $ref: '#/components/schemas/order'



